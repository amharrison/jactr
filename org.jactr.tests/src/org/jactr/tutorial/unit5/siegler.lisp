(defvar *response*)

(defconstant *siegler-data* '((0   .05 .86  0  .02  0  .02  0   0  .06)
                              (0   .04 .07 .75 .04  0  .02  0   0  .09)
                              (0   .02  0  .10 .75 .05 .01 .03  0  .06)
                              (.02  0  .04 .05 .80 .04  0  .05  0   0)
                              (0    0  .07 .09 .25 .45 .08 .01 .01 .06)
                              (.04  0   0  .05 .21 .09 .48  0  .02 .11))
  "The experimental data to be fit")

(defun test-fact (arg1 arg2)
  (reset)  

  (define-chunks-fct (list (list 'goal 'isa 'problem 'arg1 arg1 'arg2 arg2)))
  (goal-focus goal)
  
  (run 30)
  
  (chunk-slot-value-fct (buffer-read 'goal) 'answer))

    
(defun do-one-set ()
  (list (test-fact "one" "one")
        (test-fact "one" "two")
        (test-fact "one" "three")
        (test-fact "two" "two")
        (test-fact "two" "three")
        (test-fact "three" "three")))

(defun run-subjects (n)
  (let ((responses nil))
    (dotimes (i n)
      (push (do-one-set) responses))
    (analyze responses)))

(defun analyze (responses)
  (let ((results (mapcar #'(lambda (x) 
                             (mapcar #'(lambda (y) 
                                         (/ y (length responses))) x))
                   (apply #'mapcar #'(lambda (&rest z) 
                                       (let ((res nil))
                                         (dolist (i '("zero" "one" "two" "three" "four" "five" "six" "seven" "eight") res)
                                           (push (count i z :test #'(lambda (x y) (and (string y) (string-equal x y))))
                                                 res)
                                           (setf z (remove i z :test #'string-equal)))
                                         (push (length z) res)
                                         (reverse res)))
                          responses))))
    (display-results results)))

(defun display-results (results)
  (let ((questions '("1+1" "1+2" "1+3" "2+2" "2+3" "3+3")))
    (correlation results *siegler-data*)
    (mean-deviation results *siegler-data*)
    (format t "       0     1     2     3     4     5     6     7     8   Other~%")
    (dotimes (i 6)
      (format t "~a~{~6,2f~}~%" (nth i questions) (nth i results)))))
       

(clear-all)
(define-model siegler

(sgp :rt 0.0 :esc t :v nil :pm t :act t :ans 0.1 :mp 1.0)

(chunk-type problem arg1 arg2 answer state)
(chunk-type plus-fact addend1 addend2 sum)
(chunk-type number value name)

(add-dm
 (zero ISA number value 0 name "zero")
 (one ISA number value 1 name "one")
 (two ISA number value 2 name "two")
 (three ISA number value 3 name "three")
 (four ISA number value 4 name "four")
 (five ISA number value 5 name "five")
 (six ISA number value 6 name "six")
 (seven ISA number value 7 name "seven")
 (eight ISA number value 8 name "eight")
 (nine ISA number value 9 name "nine")
 (f00 ISA plus-fact addend1 zero addend2 zero sum zero)
 (f01 ISA plus-fact addend1 zero addend2 one sum one)
 (f02 ISA plus-fact addend1 zero addend2 two sum two)
 (f03 ISA plus-fact addend1 zero addend2 three sum three)
 (f04 ISA plus-fact addend1 zero addend2 four sum four)
 (f05 ISA plus-fact addend1 zero addend2 five sum five)
 (f10 ISA plus-fact addend1 one addend2 zero sum one)
 (f11 ISA plus-fact addend1 one addend2 one sum two)
 (f12 ISA plus-fact addend1 one addend2 two sum three)
 (f13 ISA plus-fact addend1 one addend2 three sum four)
 (f14 ISA plus-fact addend1 one addend2 four sum five)
 (f15 ISA plus-fact addend1 one addend2 five sum six)
 (f20 ISA plus-fact addend1 two addend2 zero sum two)
 (f21 ISA plus-fact addend1 two addend2 one sum three)
 (f22 ISA plus-fact addend1 two addend2 two sum four)
 (f23 ISA plus-fact addend1 two addend2 three sum five)
 (f24 ISA plus-fact addend1 two addend2 four sum six)
 (f25 ISA plus-fact addend1 two addend2 five sum seven)
 (f30 ISA plus-fact addend1 three addend2 zero sum three)
 (f31 ISA plus-fact addend1 three addend2 one sum four)
 (f32 ISA plus-fact addend1 three addend2 two sum five)
 (f33 ISA plus-fact addend1 three addend2 three sum six)
 (f34 ISA plus-fact addend1 three addend2 four sum seven)
 (f35 ISA plus-fact addend1 three addend2 five sum eight)
 (f40 ISA plus-fact addend1 four addend2 zero sum four)
 (f41 ISA plus-fact addend1 four addend2 one sum five)
 (f42 ISA plus-fact addend1 four addend2 two sum six)
 (f43 ISA plus-fact addend1 four addend2 three sum seven)
 (f44 ISA plus-fact addend1 four addend2 four sum eight)
 (f45 ISA plus-fact addend1 four addend2 five sum nine)
 (f50 ISA plus-fact addend1 five addend2 zero sum five)
 (f51 ISA plus-fact addend1 five addend2 one sum six)
 (f52 ISA plus-fact addend1 five addend2 two sum seven)
 (f53 ISA plus-fact addend1 five addend2 three sum eight)
 (f54 ISA plus-fact addend1 five addend2 four sum nine))



(set-base-levels 
  (zero 10) (one 10) (two 10) (three 10) (four 10) (five 10)
  (six 10) (seven 10) (eight 10) (nine 10))

(setf *actr-enabled-p* t)

)