<?xml version="1.0" encoding="UTF-8"?>
<actr>
<!-- Generated by jACT-R on Mon May 05 17:44:53 EDT 2003-->
  <model name="Attending Test" version="5.0">
      <comment></comment>
    <extension name="VisualExtension" class="actr.extensions.pm.visual.five.DefaultVisualExtension">
    </extension>
    
    <declarative-memory>
		<chunk name="ready" type="chunk" />
		<chunk name="completed" type="chunk"/>
		<chunk name="scanning" type="chunk"/>
		<chunk name="start-turn" type="chunk"/>
		<chunk name="turning" type="chunk"/>
		<chunk name="failed" type="chunk"/>
		<chunk name="encoding" type="chunk"/>
		<chunk name="try-visual-scan" type="chunk"/>
		<chunk name="try-encode" type="chunk"/>
		<chunk name="identifying" type="chunk"/>
    
    
	    <chunk-type name="goal">
	        <slot name="return-result" equals="nil"/>
	        <slot name="return-goal" equals="nil"/>
	        <slot name="status" equals="ready"/>
	        <comment>
	         general purpose goal
	         status (ready - completed)
	         return-goal pushing goal
	         return-result to catch return values.
	        </comment>
    	</chunk-type>

        <chunk-type name="search-for-visual-location" parent="goal">
            <slot name="kind" equals="visual-object"/>
            <slot name="nearest" equals="current"/>
            <slot name="value" equals="nil"/>
            <comment>
             search for something within the visual-location buffer
            </comment>
        </chunk-type>
        
        <chunk-type name="search-for-everything" parent="goal">
         <slot name="iterations" equals="0"/>
         <slot name="tmp" equals="nil"/>
        </chunk-type>
                        

        <chunk name="search-for-everything-1" type="search-for-everything">
           <slot name="status" equals="ready"/>
        </chunk>
                        
    </declarative-memory>
    
    <procedural-memory>

        <production name="StartSearch">
         <condition>
           <match buffer="goal" type="search-for-everything">
             <slot name="status" equals="ready"/>
            </match>
          </condition>
          <action>
           <modify buffer="goal">
            <slot name="status" equals="scanning"/>
           </modify>
           <add buffer="goal" type="search-for-visual-location">
             <slot name="return-goal" equals="=goal"/>
           </add>
           <output>
            ok, lets see what there is on the screen
           </output>
          </action> 
        </production>
        
        <production name="FailedSearch">
         <condition>
          <match buffer="goal" type="search-for-everything">
            <slot name="status" equals="scanning"/>
            <slot name="return-result" equals="nil"/>
          </match>
         </condition>
         <action>
           <output>
             ok, thats all there is. Im quitting
           </output>
		  <remove buffer="goal"/>
         </action>
        </production>
        
        
        <production name="SuccessfulSearch">
        <condition>
          <match buffer="goal" type="search-for-everything">
            <slot name="status" equals="scanning"/>
            <slot name="return-result" equals="=visualLocation"/>
          </match>
          <match buffer="visual-state" type="module-state">
           <slot name="modality" equals="free"/>
          </match>
         </condition>
         <action>
           <modify buffer="goal">
             <slot name="status" equals="try-encode"/>
           </modify>
           <add buffer="visual" type="visual-object">
             <slot name="screen-pos" equals="=visualLocation"/>
           </add>
           <output>
              Sweet, I found something at =visualLocation
           </output>
         </action>
        </production>
        
        <production name="SuccessfulEncoding">
         <condition>
          <match buffer="goal" type="search-for-everything">
           <slot name="status" equals="try-encode"/>
           <slot name="return-result" equals="=visualLocation"/>
          </match>
          <match buffer="visual" type="visual-object">
           <slot name="screen-pos" equals="=visualLocation"/>
           <slot name="value" equals="=value"/>
          </match>
         </condition>
         <action>
          <output> 
           I found =value at =visualLocation
          </output>
          <modify buffer="goal">
           <slot name="return-result" equals="nil"/>
           <slot name="status" equals="ready"/>
          </modify>
         </action>
        </production>
        
                    
        <production name="SearchForVisualLocation-Start">
         <condition>
            <match buffer="goal" type="search-for-visual-location">
             <slot name="status" equals="ready"/>
             <slot name="kind" equals="=kind"/>
             <slot name="nearest" equals="=nearest"/>
            </match>
            <match buffer="visual-state" type="module-state">
             <slot name="modality" equals="free"/>
            </match>
         </condition>
         <action>
            <modify buffer="goal">
             <slot name="status" equals="try-visual-scan"/>
            </modify>
            <add buffer="visual-location" type="visual-location">
             <slot name="kind" equals="=kind"/>
             <slot name="attended" equals="nil"/>
             <slot name="nearest" equals="=nearest"/>
            </add>
            <output>
             scanning the visual field for a =kind
            </output>
         </action>
         <comment>
            this is a general visual search production
            (p SearchForVisualLocation-Start
             =goal>
                isa search-for-visual-location
                status ready
                kind =kind
             =visual-state
                isa module-state
                modality free
             ==>
             =goal>
                status try-visual-scan
             +visual-location>
                isa visual-location
                kind =kind
                attended nil
                nearest current
             )
         </comment>
        </production>

        <production name="SearchForVisualLocation-Harvest">
         <condition>
            <match buffer="goal" type="search-for-visual-location">
             <slot name="status" equals="try-visual-scan"/>
             <slot name="kind" equals="=kind"/>
             <slot name="return-goal" equals="=returnGoal"/>
            </match>
            <match buffer="visual-location" type="visual-location">
             <slot name="kind" equals="=kind"/>
            </match>
         </condition>
         <action>
            <modify buffer="goal">
             <slot name="status" equals="completed"/>
            </modify>
            <add buffer="goal" chunk="=returnGoal">
             <slot name="return-result" equals="=visual-location"/>
            </add>
            <output>
             found =kind at =visual-location
            </output>
         </action>
         <comment>
            Harvest the results
         </comment>
        </production>

        <production name="SearchForVisualLocation-Mismatch">
         <condition>
            <match buffer="goal" type="search-for-visual-location">
             <slot name="status" equals="try-visual-scan"/>
             <slot name="kind" equals="=kind"/>
             <slot name="return-goal" equals="=returnGoal"/>
            </match>
            <match buffer="visual-location" type="visual-location">
             <slot name="kind" not="=kind"/>
             <slot name="kind" equals="=realKind"/>
            </match>
         </condition>
         <action>
            <modify buffer="goal">
             <slot name="status" equals="failed"/>
            </modify>
            <add buffer="goal" chunk="=returnGoal">
             <slot name="return-result" equals="nil"/>
            </add>
            <output>
             I found a =realKind but not =kind failing.
            </output>
         </action>
        </production>

        <production name="SearchForVisualLocation-Failed">
         <condition>
            <match buffer="goal" type="search-for-visual-location">
             <slot name="status" equals="try-visual-scan"/>
             <slot name="kind" equals="=kind"/>
             <slot name="return-goal" equals="=returnGoal"/>
            </match>
            <match buffer="visual-location" type="error">
            </match>
         </condition>
         <action>
            <modify buffer="goal">
             <slot name="status" equals="failed"/>
            </modify>
            <add buffer="goal" chunk="=returnGoal">
             <slot name="return-result" equals="nil"/>
            </add>
            <output>
             nothing found
            </output>
         </action>
        </production>
    
    
    </procedural-memory>    
     <parameters>
      <parameter name="W" value="0.0"/>
      <parameter name="G" value="20.0"/>
      <parameter name="UtilityThreshold" value="0.0"/>
      <parameter name="SubsymbolicComputation" value="true"/>
      <parameter name="BaseLevelLearning" value="0.5"/>
      <parameter name="ParameterLearning" value="0.5"/>
      <parameter name="AssociativeLearning" value="-Infinity"/>
      <parameter name="OptimizedLearning" value="false"/>
      <parameter name="RetrievalThreshold" value="-Infinity"/>
      <parameter name="LatencyFactor" value="0.05"/>
      <parameter name="BaseLevelConstant" value="0.0"/>
      <parameter name="DefaultActionTime" value="0.05"/>
      <parameter name="Randomness" value="false"/>
      <parameter name="ActivationNoise" value="0.0"/>
      <parameter name="PermanentNoise" value="0.0"/>
      <parameter name="ExpectedGainNoise" value="0.0"/>
      <parameter name="PartialMatching" value="false"/>
      <parameter name="MismatchPenalty" value="1.0"/>
      <parameter name="MaximumDifference" value="-10.0"/>
      <parameter name="MaximumSimilarity" value="1.0"/>
      <parameter name="CostPenalty" value="1.0"/>
      <parameter name="IntialExperience" value="10.0"/>
      <parameter name="ThresholdTime" value="2.0"/>
      <parameter name="CycleSkipping" value="true"/>
    </parameters>

    <buffer name="goal" chunk="search-for-everything-1"/>
</model>
</actr>
