<?xml version="1.0" encoding="UTF-8"?>
<actr>
<!-- Generated by jACT-R on Mon May 05 17:44:53 EDT 2003-->
  <model name="CTF" version="5.0">
 
   <declarative-memory>
   <!-- Chunk Types -->
      <!-- General purpose goals -->
      <chunk-type name="goal">
        <slot name="return-result" equals="nil" /> 
        <slot name="return-goal" equals="nil" /> 
        <slot name="return-status" equals="nil"/>
        <slot name="status" equals="ready" /> 
        <!--comment>
          general purpose goal 
          status (ready - completed) 
          return-goal pushing goal 
          return-result to catch return values.
        </comment--> 
      </chunk-type>

      <!-- Goals for retrieving objects from configural and then visual -->

      <chunk-type name="identify" parent="goal">
          <slot name="configural" equals="nil"/>
          <slot name="name" equals="nil"/>
        </chunk-type>

      <chunk-type name="search-for-visual-location" parent="goal">
        <slot name="kind" equals="nil"/>
        <slot name="nearest" equals="current"/>
        <slot name="value" equals="nil"/>
        <slot name="color" equals="nil"/>
        <!--comment>
          search for something within the visual-location buffer
        </comment-->
      </chunk-type>

      <chunk-type name="search-for-configural" parent="goal">
        <slot name="visual-location" equals="nil"/>
      </chunk-type>
      
      <chunk-type name="take-perspective" parent="goal">
        <slot name="range" equals="nil"/>
        <slot name="bearing" equals="nil"/>
        <slot name="orientation" equals="nil"/>
      </chunk-type> 

      <chunk-type name="move-to-object" parent="goal">
        <slot name="range" equals="nil"/>
        <slot name="bearing" equals="nil"/>
        <slot name="orientation" equals="nil"/>
      </chunk-type> 
      
      <!-- Task specific goals -->
      
      <chunk-type name="capture-the-flag" parent="goal">
         <slot name="my-color" equals="nil"/>
         <slot name="opponent" equals="nil"/>
         <slot name="flag" equals="nil"/>
       </chunk-type>
       
       <chunk-type name="scan-field" parent="goal">
          <slot name="my-color" equals="nil"/>
          <slot name="opponent" equals="nil"/>
          <slot name="flag" equals="nil"/>
       </chunk-type>
     
       <chunk-type name="check-if-visible" parent="goal">
         <slot name="opponent-id" equals="nil" />
         <slot name="my-color" equals="nil"/>
         <slot name="imagined-perspective" equals="nil"/>
       </chunk-type>
     
       <chunk-type name="hide" parent="goal">
         <slot name="opponent" equals="nil"/>
         <!--comment>
           opponent is who you want to hide from
         </comment-->
       </chunk-type>
       
        <chunk name="id-fake-config" type="identifier">  <!-- idchunk for fake configural-reps -->
	  <slot name="token" equals="'fake-config'"/>
	  <slot name="type" equals="'fake-config'"/>
	  <slot name="tag" equals="'id-fake-config'"/>
	</chunk>

	<chunk name="fake-config" type="configural-rep">  <!-- the actual fake configural-rep -->
	  <slot name="id" equals="id-fake-config"/>
	</chunk>
       
       <chunk-type name="find-hiding-place" parent="goal">
         <slot name="opponent" equals="nil"/>
         <slot name="hiding-spot" equals="fake-config"/>
         <slot name="imagined-perspective" equals="nil"/>
         <!--comment>
           opponent is who you want to hide from, hiding-spot is where you are hiding
         </comment-->
       </chunk-type>
       
       <!-- Chunks -->
       <chunk name="play" type="capture-the-flag">
         <slot name="status" equals="ready"/>
         <slot name="my-color" equals="blue"/>
       </chunk>
      
       
     </declarative-memory>
     
     <procedural-memory>
     
       <!-- Productions -->
       
         <production name="CaptureTheFlag-Start">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="ready"/>
               <slot name="my-color" equals="=color"/>
             </match>
             <match buffer="manual-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>

             <match buffer="visual-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="scan-field"/>
               <slot name="flag" equals="nil"/>
               <slot name="opponent" equals="nil"/>
             </modify>
             <add buffer="goal" type="scan-field">
               <slot name="return-goal" equals="=goal"/>
               <slot name="my-color" equals="=color"/>
             </add>
             <!--add buffer="visual-location" type="visual-reset"/-->
             <output>
               "Scanning the playing field..."
             </output>
           </action>
         </production>
         
         <production name="CaptureTheFlag-NothingThere">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="scanning-done"/>
               <slot name="opponent" equals="nil"/>
               <slot name="flag" equals="nil"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="done"/>
             </modify>
           </action>
         </production> 

         <production name="CaptureTheFlag-CheckIfVisible">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="scanning-done"/>
               <slot name="opponent" equals="=id"/>
               <slot name="my-color" equals="=color"/>
             </match>
             <match buffer="configural-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>
             <match buffer="configural" type="configural-rep">
               <slot name="id" equals="=id"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="check-visibility"/>
             </modify>
             <add buffer="visual-location" type="visual-reset"/>
             <add buffer="goal" type="check-if-visible">
             	<slot name="opponent-id" equals="=id"/>
             	<slot name="return-goal" equals="=goal"/>
             	<slot name="my-color" equals="=color"/>
             </add>
           </action>
         </production>

         <production name="CaptureTheFlag-CaptureTheFlag">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="check-done"/>
		     <slot name="return-result" equals="=ret-res"/>
               <slot name="flag" equals="=flag"/>
             </match> 
             <match buffer="configural" chunk="=flag">
               <slot name="right-bearing" equals="=rightb"/>
               <slot name="left-bearing" equals="=leftb"/>
               <slot name="right-distance" equals="=rightd"/>
             </match>
             <match buffer="manual-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>
           </condition>
           <action>
             <scriptable-action>
               <![CDATA[
                function fire(model, production, bindings)
                {
		 	   var lbearing = bindings.get("=lbearing");
 		 	   var rbearing = bindings.get("=rbearing");
		  	   var bearing = new java.lang.Double((lbearing.doubleValue() + rbearing.doubleValue()) / 2.0);
		 	   bindings.put("=bearing", bearing);
                  var rrange = new java.lang.Double(bindings.get("=rightd"));
		 	   var range = new java.lang.Double(java.lang.Math.abs(rrange.doubleValue() * java.lang.Math.cos(java.lang.Math.toRadians(rbearing.doubleValue()-bearing.doubleValue()))) - .00001);
		  
		 	   if(1.0 < range) range = new java.lang.Double(1.0);
			   bindings.put("=orientation", new java.lang.Double(0.0));
			   bindings.put("=flagRange", range);

			   var cost = new java.lang.Double(range.doubleValue() * 5);
			   production.getSubsymbolicProduction().setParameter("C", cost); 

			   var visible = new java.lang.String(bindings.get("=ret-res"));
			   if(visible.equals("\"not-visible\"")) 
				production.getSubsymbolicProduction().setParameter("P", new java.lang.Double(.6));
			   else production.getSubsymbolicProduction().setParameter("P", new java.lang.Double(.2));
		 
		 	   return 0.0;
		 	 }
                ]]>
              </scriptable-action>
              <modify buffer="goal">
                <slot name="status" equals="done"/>
              </modify>
              <add buffer="goal" type="move-to-object">
               <slot name="range" equals="=flagRange"/>
	          <slot name="bearing" equals="=bearing"/>
               <slot name="orientation" equals="=orientation"/>
             </add>
            </action>
	       <parameters>
              <parameter name="EffortTime" value="0.05"/>
              <parameter name="EffortCount" value="0.0"/>
		    <parameter name="EffortTimes" value="()"/>
              <parameter name="SuccessTimes" value="()"/>
              <parameter name="SuccessCount" value="0.0"/>
              <parameter name="FailureTimes" value="()"/>
              <parameter name="FailureCount" value="0.0"/>
              <parameter name="CostEquation" value="'actr.production.four.DefaultCostEquation'"/>
              <parameter name="ProbabilityEquation" value="'actr.production.four.DefaultProbabilityEquation'"/>
	         <parameter name="ActivationNoise" value="0.5"/>
	       </parameters>
          </production>

	 <production name="CaptureTheFlag-TagOpponent">
        <condition>
          <match buffer="goal" type="capture-the-flag">
            <slot name="status" equals="check-done"/>
            <slot name="opponent" equals="=opponent"/>
          </match>
          <match buffer="configural-state" type="module-state">       
	       <slot name="modality" equals="free"/>
	     </match>
	     <match buffer="configural" type="configural-rep">
		  <slot name="id" equals="=opponent"/>
            <slot name="right-range" equals="=rightd"/>
	       <slot name="right-bearing" equals="=rbearing"/>
            <slot name="left-bearing" equals="=lbearing"/>
          </match>
	   </condition>
	   <action>
             <scriptable-action>
               <![CDATA[
                function fire(model, production, bindings)
                {

		  	   var lbearing = bindings.get("=lbearing");
 		 	   var rbearing = bindings.get("=rbearing");
			   var bearing = new java.lang.Double((lbearing.doubleValue() + rbearing.doubleValue()) / 2.0);
                  var rrange = new java.lang.Double(bindings.get("=rightd"));
			   var range = new java.lang.Double(java.lang.Math.abs(rrange.doubleValue() * java.lang.Math.cos(java.lang.Math.toRadians(rbearing.doubleValue()-bearing.doubleValue()))) - .00001);
		  
			   //if(1.0 < range) range = new java.lang.Double(1.0);
		 	  bindings.put("=orientation", new java.lang.Double(0.0));
		 	  bindings.put("=opponent-range", range);
	            bindings.put("=bearing", bearing);

			   //var cost = new java.lang.Double(range.doubleValue() * 5);
			   //production.getSubsymbolicProduction().setParameter("C", cost); 
		 
		 	  return 0.0;
		      }
                ]]>
              </scriptable-action>
              <modify buffer="goal">
                <slot name="status" equals="ready"/>
              </modify>
	         <add buffer="goal" type="move-to-object">
                <slot name="range" equals="=opponent-range"/>
	           <slot name="bearing" equals="=bearing"/>
                <slot name="orientation" equals="=orientation"/>
              </add>
	       </action>
	       <parameters>
		    <parameter name="P" value="0.4"/>  <!-- make this variable?-->
		    <parameter name="C" value="3"/>
              <parameter name="EffortTime" value="0.05"/>
              <parameter name="EffortCount" value="0.0"/>
		    <parameter name="EffortTimes" value="()"/>
              <parameter name="SuccessTimes" value="()"/>
              <parameter name="SuccessCount" value="0.0"/>
              <parameter name="FailureTimes" value="()"/>
              <parameter name="FailureCount" value="0.0"/>
              <parameter name="CostEquation" value="'actr.production.four.DefaultCostEquation'"/>
              <parameter name="ProbabilityEquation" value="'actr.production.four.DefaultProbabilityEquation'"/>
	         <parameter name="ActivationNoise" value="0.25"/>
	       </parameters>
         </production>
         
         <production name="CaptureTheFlag-NotVisible-StayHidden">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="check-done"/>
			<slot name="return-result" equals="not-visible"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="done"/>
             </modify>
           </action>
	        <parameters>
		    <!-- P here is hard - short run probability down, long run up? -->
		    <parameter name="P" value="0.2"/>  <!-- make this variable?-->
              <parameter name="C" value="0"/>
              <parameter name="EffortTime" value="0.05"/>
              <parameter name="EffortCount" value="0.0"/>
		    <parameter name="EffortTimes" value="()"/>
              <parameter name="SuccessTimes" value="()"/>
              <parameter name="SuccessCount" value="0.0"/>
              <parameter name="FailureTimes" value="()"/>
              <parameter name="FailureCount" value="0.0"/>
              <parameter name="CostEquation" value="'actr.production.four.DefaultCostEquation'"/>
              <parameter name="ProbabilityEquation" value="'actr.production.four.DefaultProbabilityEquation'"/>
	         <parameter name="ActivationNoise" value="0.25"/>
	       </parameters>
         </production>
         
         <production name="CaptureTheFlag-Visible-Hide">
           <condition>
             <match buffer="goal" type="capture-the-flag">
			<slot name="status" equals="check-done"/>
               <slot name="return-result" equals="visible"/>
               <slot name="opponent" equals="=opponent"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="hiding"/>
             </modify>
             <add buffer="visual-location" type="visual-reset"/>
             <add buffer="goal" type="hide">
               <slot name="opponent" equals="=opponent"/>
               <slot name="return-goal" equals="=goal"/>
             </add>
           </action>
	        <parameters>
		    <!-- P here is hard - short run probability down, long run up? -->
		    <parameter name="P" value="0.4"/>  <!-- make this variable?-->
              <parameter name="C" value="4"/>
              <parameter name="EffortTime" value="0.05"/>
              <parameter name="EffortCount" value="0.0"/>
		    <parameter name="EffortTimes" value="()"/>
              <parameter name="SuccessTimes" value="()"/>
              <parameter name="SuccessCount" value="0.0"/>
              <parameter name="FailureTimes" value="()"/>
              <parameter name="FailureCount" value="0.0"/>
              <parameter name="CostEquation" value="'actr.production.four.DefaultCostEquation'"/>
              <parameter name="ProbabilityEquation" value="'actr.production.four.DefaultProbabilityEquation'"/>
	         <parameter name="ActivationNoise" value="0.25"/>
	       </parameters>
         </production>         
         
         <production name="CaptureTheFlag-CantHide">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="cant-hide"/>
             </match>
           </condition>
           <action>
           <!--comment>
             What do here??????
           </comment-->
             <modify buffer="goal">
               <slot name="status" equals="done"/>
             </modify>
           </action>
         </production>         
         
         <production name="CaptureTheFlag-Hidden">
           <condition>
             <match buffer="goal" type="capture-the-flag">
               <slot name="status" equals="hidden"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="done"/>
             </modify>
           </action>
         </production>
         
         
         
         
         
         <production name="ScanField-Start">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="ready"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="scanning"/>
               <slot name="return-result" equals="nil"/>
             </modify>
             <add buffer="goal" type="search-for-visual-location">
               <slot name="kind" equals="configural-rep"/>
               <slot name="return-goal" equals="=goal"/>
               <slot name="status" equals="ready"/>
             </add>
           </action>
         </production>
         
         <production name="ScanField-NoLocationFound">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="no-location-found"/>
               <slot name="return-result" equals="nil"/>
               <slot name="return-goal" equals="=ret"/>
             </match>
           </condition>
           <action>
             <scriptable-action>
              <![CDATA[
              function fire(model, production, bindings)
              {
              	var goal = bindings.get("=goal");
		var opponent = jactr.getSlotValue(goal, "opponent");
		var flag = jactr.getSlotValue(goal, "flag");

		var new_goal = bindings.get("=ret");
		jactr.setSlotValue(new_goal, "opponent", opponent);
		jactr.setSlotValue(new_goal, "flag", flag);

                return 0.0;
              }
              ]]>
	   </scriptable-action>
             <add buffer="goal" chunk="=ret">
               <slot name="status" equals="scanning-done"/>
             </add>
           </action>
         </production>
             
         <production name="ScanField-LocationFound">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="location-found"/>
               <slot name="return-result" equals="=loc"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="encoding"/>
             </modify>
             <add buffer="goal" type="search-for-configural">
               <slot name="return-goal" equals="=goal"/>
               <slot name="status" equals="ready"/>
               <slot name="visual-location" equals="=loc"/>
             </add>
             <remove buffer="visual-location"/>
           </action>
         </production>
             
         <production name="ScanField-NoConfiguralFound">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="no-configural-found"/>
                <slot name="return-result" equals="nil"/>
               <slot name="return-goal" equals="=ret"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="ready"/>
             </modify>
           </action>
         </production>
         
         <production name="ScanField-ConfiguralFound">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="configural-found"/>
               <slot name="return-result" equals="=opponent"/>
               <slot name="my-color" equals="=color"/>
            </match>
          </condition>
          <action>
             <scriptable-action>
               <![CDATA[
                function fire(model, production, bindings)
                {
                  var mycolor = new java.lang.String(bindings.get("=color"));
                  
                  var opponentcolor;
 		  if(mycolor.equals("blue")) opponentcolor = new java.lang.String("red");
 		  else opponentcolor = new java.lang.String("blue");
		  
		  bindings.put("=opponent-color", opponentcolor);
		 
		  return 0.0;
		}
                ]]>
              </scriptable-action>          
            <modify buffer="goal">
              <slot name="status" equals="identify"/>
            </modify>
            <add buffer="configural" chunk="=opponent"/>
            <add buffer="goal" type="identify">
              <slot name="status" equals="ready"/>
              <slot name="configural" equals="=opponent"/>
              <slot name="return-goal" equals="=goal"/>
              <slot name="name" equals="field"/>
            </add>
          </action>
        </production>
              
         <production name="ScanField-IdentifyFailed">
           <condition>
             <match buffer="goal" type="scan-field">
               <slot name="status" equals="identify-failed"/>
               <slot name="return-result" equals="=opponent"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="ready"/>
             </modify>
             <!--remove buffer="configural" chunk="=opponent"/-->
             <!--comment>
               Should =opponent from the configural buffer,
               but it's busted so i commented it out.
             </comment-->
           </action>
         </production>            
            
        <production name="ScanField-IdentifiedOpponent">
          <condition>
            <match buffer="goal" type="scan-field">
              <slot name="status" equals="identified-opponent"/>
              <slot name="return-result" equals="=opponent"/>
            </match>
	       <match buffer="configural" chunk="=opponent">
	  	    <slot name="id" equals="=oppid"/>
		  </match>
          </condition> 
          <action> 
            <modify buffer="goal">
              <slot name="status" equals="ready"/>
              <slot name="opponent" equals="=oppid"/>
            </modify>          
          </action>
        </production>
       
        <production name="ScanField-IdentifiedFlag">
          <condition>
            <match buffer="goal" type="scan-field">
              <slot name="status" equals="identified-Flag"/>
              <slot name="return-result" equals="=flag"/>
            </match>
          </condition> 
          <action> 
            <modify buffer="goal">
              <slot name="status" equals="ready"/>
              <slot name="flag" equals="=flag"/>
            </modify>          
          </action>
        </production>
       
       
       
         
         <production name="CheckIfVisible-Start">
           <condition>
             <match buffer="goal" type="check-if-visible">
               <slot name="status" equals="ready"/>
               <slot name="opponent-id" equals="=id"/>
             </match>
             <match buffer="configural-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>
             <match buffer="visual-state" type="module-state">
               <slot name="modality" equals="free"/>
             </match>
             <match buffer="configural" type="configural-rep">
               <slot name="id" equals="=id"/>
               <slot name="screen-pos" equals="=screen-pos"/>
             </match>
           </condition>
           <action>
             <modify buffer="goal">
               <slot name="status" equals="find-possible-obstacle"/>
             </modify>
             <add buffer="configural" type="configural-rep">
               <slot name="right-range" equals=".001"/>
               <slot name="left-range" equals=".001"/>
               <slot name="right-bearing" equals="-89"/>
               <slot name="left-bearing" equals="89"/>
               <slot name="top-bearing" equals="0"/>
               <slot name="bottom-bearing" equals="0"/>
               <slot name="top-range" equals=".001"/>
               <slot name="bottom-range" equals=".001"/>
               <slot name="bottom-pitch" equals="0"/>
               <slot name="top-pitch" equals="0"/>
               <slot name="id" equals="myself"/>
             </add>
             <add buffer="visual" chunk="=screen-pos"/>
           </action>
         </production>
         
         <production name="CheckIfVisible-LookForObstacles">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="find-possible-obstacle"/>
              </match>
              <match buffer="visual" type="visual-location"/>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="scanning"/>
                <slot name="return-result" equals="nil"/>
              </modify>
              <add buffer="goal" type="search-for-visual-location">
                <slot name="kind" equals="configural-rep"/>
                <slot name="return-goal" equals="=goal"/>
                <slot name="status" equals="ready"/>
                <slot name="nearest" equals="=visual"/>
                <!--comment>
                  Right now just look for the nearest object to the opponent
                </comment-->
              </add>
            </action>
          </production>
         
          <production name="CheckIfVisible-NoLocationFound">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="no-location-found"/>
                <slot name="return-result" equals="nil"/>
                <slot name="return-goal" equals="=ret"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
			 <slot name="status" equals="check-done"/>
                <slot name="return-result" equals="not-visible"/>
              </modify>
            </action>
          </production>
             
          <production name="CheckIfVisible-LocationFound">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="location-found"/>
                <slot name="return-result" equals="=loc"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="encoding"/>
              </modify>
              <add buffer="goal" type="search-for-configural">
                <slot name="return-goal" equals="=goal"/>
                <slot name="status" equals="ready"/>
                <slot name="visual-location" equals="=loc"/>
              </add>
              <remove buffer="visual-location"/>
            </action>
          </production>
             
          <production name="CheckIfVisible-NoConfiguralFound">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="no-configural-found"/>
                <slot name="return-result" equals="nil"/>
                <slot name="return-goal" equals="=ret"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="return-result" equals="not-visible"/>
			 <slot name="status" equals="check-done"/>
              </modify>
            </action>
          </production>
 
         <production name="CheckIfVisible-TakePerspective">
           <condition>
             <match buffer="goal" type="check-if-visible">
               <slot name="status" equals="configural-found"/>
               <slot name="opponent-id" equals="=id"/>
               <slot name="return-result" equals="=obstacle"/>
             </match>
              <match buffer="visual-state" type="module-state">
                <slot name="modality" equals="free"/>
              </match>  
             <match buffer="configural" type="configural-rep">
               <slot name="id" equals="=id"/>
               <slot name="right-bearing" equals="=rightb"/>
               <slot name="left-bearing" equals="=leftb"/>
               <slot name="right-range" equals="=rightd"/>
               <!--comment>
                 This should be the opponent's configural
                 The obstacle's should be in there as well
               </comment-->
             </match>
           </condition>
           <action>
             <scriptable-action>
               <![CDATA[
                function fire(model, production, bindings)
                {
                  var obstacle = bindings.get("=obstacle");
                  var id = jactr.getSlotValue(obstacle, "id");
                  var goal = bindings.get("=goal");
                  jactr.setSlotValue(goal, "return-result", id);
                  
                  var world = bindings.get("=world");

                  var robot = world.getAgents().get(0);
		  var agentOrient = robot.getOrientation();
		  agentOrient.x = java.lang.Math.toDegrees(agentOrient.x);
		  agentOrient.y = java.lang.Math.toDegrees(agentOrient.y);
	          agentOrient.z = java.lang.Math.toDegrees(agentOrient.z);                 
                  
                  //check as opponent is, or if he faces agent?
                  var opponent = bindings.get("=configural");
                  var opponentName = new java.lang.String(jactr.getSlotValue(opponent, "id"));
		  opponentName = opponentName.substring(3, opponentName.length());
                  var opponentOrient = world.getDescriptor(opponentName).getOrientation();
                  opponentOrient.z = java.lang.Math.toDegrees(opponentOrient.z);
                  var opponentZ = new java.lang.Double(opponentOrient.z - agentOrient.z);
                  
                  var turnAround = new java.lang.Double(180.0);
                  bindings.put("=opponentOrient", turnAround);
                
                  var lbearing = new java.lang.Double(bindings.get("=leftb"));
		  var rbearing = new java.lang.Double(bindings.get("=rightb"));
		  var bearing = new java.lang.Double((lbearing.doubleValue() + rbearing.doubleValue()) / 2);
	          bindings.put("=opponentBearing", bearing);
	          
	          var rrange = new java.lang.Double(bindings.get("=rightd"));
		  var range = new java.lang.Double(java.lang.Math.abs(rrange.doubleValue() * java.lang.Math.cos(java.lang.Math.toRadians(rbearing-bearing))) - .00001);
		  if(range.doubleValue() < 0) {
		    jactr.setSlotValue(goal, "range", new java.lang.Double(-1 * range.doubleValue()));
		    bearing = new java.lang.Double(180 + bearing.doubleValue());
		    bindings.put("=opponentBearing", bearing);
		  }
		  
		  bindings.put("=opponentRange", range);
		 
		  return 0.0;
		  }
                ]]>
              </scriptable-action>
              <modify buffer="goal">
                <slot name="status" equals="take-opponent-position"/>
              </modify>
              <add buffer="visual-location" type="visual-reset"/>
              <add buffer="goal" type="take-perspective">
              	<slot name="status" equals="do"/>
                <slot name="range" equals="=opponentRange"/>
                <slot name="bearing" equals="=opponentBearing"/>
                <slot name="orientation" equals="=opponentOrient"/>
                <slot name="return-goal" equals="=goal"/>
                <slot name="return-status" equals="in-opponents-shoes"/>
              </add>              
            </action>
          </production>

          <production name="CheckIfVisible-HarvestMyself">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="in-opponents-shoes"/>
              </match>
              <match buffer="configural" type="configural-rep">
                <slot name="id" equals="myself"/>
              </match>
              <match buffer="retrieval-state" type="module-state">
                <slot name="modality" equals="free"/>
              </match> 
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="do-the-check"/>
              </modify>        
              <add buffer="retrieval" chunk="=configural"/>
              <remove buffer="configural">
                <slot name="id" equals="myself"/>
              </remove>
            </action>
          </production>
          
          
          <production name="CheckIfVisible-DoTheCheck">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="do-the-check"/>
                <slot name="return-result" equals="=obstacle-id"/>
                <slot name="imagined-perspective" equals="=perspective"/>
              </match>
              <match buffer="retrieval-state" type="module-state">
                <slot name="modality" equals="free"/>
              </match> 
              <match buffer="retrieval" type="configural-rep"/>
              <match buffer="configural" type="configural-rep">
                <slot name="id" equals="=obstacle-id"/>
              </match>
            </condition>
            <action>
             <scriptable-action>
               <![CDATA[
                function fire(model, production, bindings)
                {
                  var me = bindings.get("=retrieval");
                  var obstacle = bindings.get("=configural");
                  var goal = bindings.get("=goal");
                  var imag = bindings.get("=perspective");
                   
                  var melb = jactr.getSlotValue(me, "left-bearing");
                  var merb = jactr.getSlotValue(me, "right-bearing");
                  var melr = jactr.getSlotValue(me, "left-range");
                  var merr = jactr.getSlotValue(me, "right-range");
                  
                  var obslb = jactr.getSlotValue(obstacle, "left-bearing");
                  var obsrb = jactr.getSlotValue(obstacle, "right-bearing");
                  var obslr = jactr.getSlotValue(obstacle, "left-range");
                  var obsrr = jactr.getSlotValue(obstacle, "right-range");
                  
                  if(obslb > melb && obsrb < merb && obslr < melr && obsrr < merr) {
                  	jactr.setSlotValue(goal, "status", "not-visible");
                  	jactr.setSlotValue(imag, "return-status", "not-visible");
                  } else {
                   	jactr.setSlotValue(goal, "status", "visible");
                  	jactr.setSlotValue(imag, "return-status", "visible");                 
                  }
		 
		  return 0.0;
		}
                ]]></scriptable-action>                  
              <add buffer="goal" chunk="=perspective">
                <slot name="status" equals="undo"/>
                <slot name="return-goal" equals="=goal"/>
              </add>
            </action>
          </production>

          <production name="CheckIfVisible-NotVisible">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="not-visible"/>
                <slot name="return-goal" equals="=ret"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="return-result" equals="nil"/>
              </modify>
              <add buffer="goal" chunk="=ret">
                <slot name="return-result" equals="not-visible"/>
			 <slot name="status" equals="check-done"/>
              </add>
            </action>
          </production>
          
          <production name="CheckIfVisible-Visible">
            <condition>
              <match buffer="goal" type="check-if-visible">
                <slot name="status" equals="visible"/>
                <slot name="return-goal" equals="=ret"/>
              </match>
            </condition>
            <action>
              <add buffer="goal" chunk="=ret">
                <slot name="return-result" equals="visible"/>
			 <slot name="status" equals="check-done"/>
              </add>
            </action>
          </production>
          
          
          
          
          
          
          
          
          
          <!--
              Find hiding place so that they can't see you when they turn around? 
              Or at their current orientation?
              
              Same ? for determining whether or not to hide.
           -->
            
            
          <production name="Hide-FindHidingPlace">
            <condition>
              <match buffer="goal" type="hide">
                <slot name="status" equals="ready"/>
                <slot name="opponent" equals="=opponent"/>
              </match>
		    <match buffer="configural" type="configural-rep">
			 <slot name="id" equals="=opponent"/>
		    </match>
            </condition>
            <action>
              <add buffer="goal" type="find-hiding-place">
                <slot name="return-goal" equals="=goal"/>
                <slot name="opponent" equals="=configural"/>
              </add>
            </action>
          </production>
          
          <production name="Hide-NoHidingPlace">
            <condition>
              <match buffer="goal" type="hide">
                <slot name="status" equals="no-hiding-place"/>
                <slot name="return-goal" equals="=return-goal"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="cant-hide"/>
              </modify>
              <add buffer="goal" chunk="=return-goal">
                <slot name="status" equals="cant-hide"/>
              </add>
            </action>
          </production>        
          
          <!-- make sure you return the actrs-visual corresponding to the
               place YOU will be, not corresponding to the obstacle.  -->
          <production name="Hide-HidingPlaceFound">
            <condition>
              <match buffer="goal" type="hide">
                <slot name="status" equals="hiding-place-found"/>
                <slot name="return-result" equals="=hiding-place"/>
              </match>
 	      <match buffer="manual-state" type="module-state">
                <slot name="modality" equals="free"/>
              </match>             
            </condition>
            <action>
              <scriptable-action>
	        <![CDATA[
                function fire(model, production, bindings)
                {
	       	  var spot = bindings.get("=hiding-place");
		  var lbearing = jactr.getSlotValue(spot, "left-bearing");
		  var rbearing = jactr.getSlotValue(spot, "right-bearing");
		  var bearing = (lbearing.doubleValue() + rbearing.doubleValue()) / 2.0;
		  bindings.put("=bearing", new java.lang.Double(bearing));

		  var rrange = jactr.getSlotValue(spot, "right-range");
		  var range = new java.lang.Double(java.lang.Math.abs(rrange.doubleValue() * java.lang.Math.cos(java.lang.Math.toRadians(rbearing.doubleValue()-bearing))) - .00001);
	          bindings.put("=range", range);
                  bindings.put("=orientation", new java.lang.Double(0.0));
		  return 0.0;
                }
	        ]]>
	      </scriptable-action>
              <output>
                 "turning to move =bearing degrees"
              </output>
              <modify buffer="goal">
                <slot name="status" equals="hidden"/>
              </modify>
              <add buffer="goal" type="move-to-object">
                <slot name="bearing" equals="=bearing"/>
	        <slot name="range" equals="=range"/>
                <slot name="orientation" equals="=orientation"/>
              </add>
            </action>
          </production>
          
          <production name="Hide-DoneHiding">
            <condition>
              <match buffer="goal" type="hide">
                <slot name="status" equals="hidden"/>
                <slot name="return-goal" equals="=return-goal"/>
              </match>
            </condition>
            <action>
              <add buffer="goal" chunk="=return-goal">
                <slot name="status" equals="hidden"/>
              </add>
            </action>
          </production>
              
          
          
          
          
          
          
          
          
          
          
          <!-- Should be able to constrain search by color, right? --> 
          <production name="FindHidingPlace-Start">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="ready"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="scanning"/>
                <slot name="return-result" equals="nil"/>
              </modify>
              <add buffer="goal" type="search-for-visual-location">
                <slot name="kind" equals="configural-rep"/>
                <slot name="return-goal" equals="=goal"/>
                <slot name="status" equals="ready"/>
              </add>
            </action>
          </production>
          
          <production name="FindHidingPlace-NoLocationFound">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="no-location-found"/>
                <slot name="return-goal" equals="=return"/>
                <slot name="return-result" equals="nil"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="failed"/>
              </modify>
              <add buffer="goal" chunk="=return">
                <slot name="status" equals="no-hiding-place"/>
              </add>
            </action>
          </production>

          <production name="FindHidingPlace-LocationFound">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="location-found"/>
                <slot name="return-result" equals="=visual-location"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="encoding"/>
              </modify>
              <add buffer="goal" type="search-for-configural">
                <slot name="return-goal" equals="=goal"/>
                <slot name="status" equals="ready"/>
                <slot name="visual-location" equals="=visual-location"/>
              </add>
              <remove buffer="visual-location"/>
            </action>
          </production>
                       
          <production name="FindHidingPlace-NoConfiguralFound">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="no-configural-found"/>
                <slot name="return-result" equals="nil"/>
                <slot name="return-goal" equals="=ret"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="not-visible"/>
              </modify>
	      <add buffer="goal" chunk="=ret">
	        <slot name="status" equals="no-hiding-place"/>
	      </add>
            </action>
          </production>
      
          <production name="FindHidingPlace-ConfiguralFound">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="configural-found"/>
                <slot name="return-result" equals="=obstacle"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="identify"/>
              </modify>
              <add buffer="goal" type="identify">
                <slot name="status" equals="ready"/>
                <slot name="configural" equals="=obstacle"/>
                <slot name="name" equals="obstacle"/>
                <slot name="return-goal" equals="=goal"/>
              </add>
            </action>
          </production>
              
          <production name="FindHidingPlace-NotAnObstacle">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="identify-failed"/>
              </match>
            </condition>
            <action>
              <modify buffer="goal">
                <slot name="status" equals="ready"/>
              </modify>
              <output>
                "Trying again, this wasn't an obstacle"
              </output>
            </action>
          </production>
              
          <production name="FindHidingPlace-CheckIfVisible">
            <condition>
              <match buffer="goal" type="find-hiding-place">
                <slot name="status" equals="identify-suceeded"/>
                <slot name="return-result" equals="=obstacle"/>
                <slot name="opponent" equals="=opponent"/>
                <slot name="hiding-spot" equals="=hiding-spot"/>
              </match>
            </condition>
            <action>
            <scriptable-action>
              <![CDATA[
              function fire(model, production, bindings)
              {
	        var hiding_spot = bindings.get("=hiding-spot");
	        var opponent = bindings.get("=opponent");
	        var obstacle = bindings.get("=obstacle");

		var world = bindings.get("=world");
                var robot = world.getAgents().get(0);
		var agentOrient = robot.getOrientation();
	        agentOrient.z = java.lang.Math.toDegrees(agentOrient.z);                 
                  
                var opponentName = bindings.get("=opponent").getSymbolicChunk().getSlotValue("id").getSymbolicChunk().getSlotValue("token");
		var goal = bindings.get("=goal");
		var id = jactr.getSlotValue(obstacle, "id");
                jactr.setSlotValue(goal, "return-result",id);
		opponentName = opponentName.substring(1, opponentName.length() - 1);
                var opponentOrient = world.getDescriptor(opponentName).getOrientation();
                opponentOrient.z -= agentOrient.z;
		
		var opprbearing = new java.lang.Double(jactr.getSlotValue(opponent, "right-bearing"));
		var opplbearing = new java.lang.Double(jactr.getSlotValue(opponent, "left-bearing"));
		var oppbearingsum = new java.lang.Double(opplbearing.doubleValue() + opprbearing.doubleValue());
		var oppbearing = oppbearingsum / 2.0;
		var opponentrange = new java.lang.Double(jactr.getSlotValue(opponent, "right-range") * 
			java.lang.Math.cos(java.lang.Math.toRadians(opprbearing - oppbearing)));
		bindings.put("=bearing", new java.lang.Double(oppbearing));
		bindings.put("=range", new java.lang.Double(opponentrange));
		bindings.put("=orientation", opponentOrient.z);

		var obsrbearing = new java.lang.Double(jactr.getSlotValue(obstacle, "right-bearing"));
		var obslbearing = new java.lang.Double(jactr.getSlotValue(obstacle, "left-bearing"));
		var obsbearingsum = new java.lang.Double(obslbearing.doubleValue() + obsrbearing.doubleValue());
		var obsbearing = obsbearingsum / 2.0;
		var obstaclerange = new java.lang.Double(jactr.getSlotValue(obstacle, "right-range") * 
			java.lang.Math.cos(java.lang.Math.toRadians(obsrbearing-obsbearing)));

		var obsX = new java.lang.Double(obstaclerange * 
			java.lang.Math.cos(java.lang.Math.toRadians(obsbearing)));
		var obsY = new java.lang.Double(obstaclerange * 
			java.lang.Math.sin(java.lang.Math.toRadians(obsbearing)));
		var oppX = new java.lang.Double(opponentrange * 
			java.lang.Math.cos(java.lang.Math.toRadians(oppbearing)));
		var oppY = new java.lang.Double(opponentrange * 
			java.lang.Math.sin(java.lang.Math.toRadians(oppbearing)));
		bindings.put("=obsX", obsX);
		bindings.put("=obsY", obsY);
		bindings.put("=oppX", oppX);
		bindings.put("=oppY", oppY);
		var slope = (oppY - obsY) / (oppX - obsX);
		
		var hspotdeltaX = java.lang.Math.sqrt(0.01 / (java.lang.Math.pow(slope, 2.0) + 1));
		var hspotdeltaY = java.lang.Math.abs(slope * hspotdeltaX);	

		var hspotX;
		var hspotY;
		if(obsX < oppX) hspotX = obsX.doubleValue() - hspotdeltaX;
		else hspotX = obsX.doubleValue() + hspotdeltaX;
		if(obsY < oppY) hspotY = obsY - hspotdeltaY;
		else hspotY = obsY.doubleValue() + hspotdeltaY;
		bindings.put("=hspotX", hspotX);
		bindings.put("=hspotY", hspotY);
		
		var hspotrange = java.lang.Math.pow(hspotX, 2.0) + java.lang.Math.pow(hspotY, 2.0);
		hspotrange = java.lang.Math.sqrt(hspotrange);
		var hspotbearing = java.lang.Math.toDegrees(java.lang.Math.atan(hspotY / hspotX));;		

		//Dependent on the size of the robot - this is what
		//we need to 'verify' later on - that the robot isn't
		//too tall for the hiding spot, etc.
		jactr.setSlotValue(hiding_spot, "right-range", 
		  hspotrange);
		hiding_spot.getSymbolicChunk().setSlotValue("left-range", 
		  hspotrange);
		hiding_spot.getSymbolicChunk().setSlotValue("right-bearing", 
		  new java.lang.Double(hspotbearing + .001));
		hiding_spot.getSymbolicChunk().setSlotValue("left-bearing", 
	  	  new java.lang.Double(hspotbearing - .001));
		hiding_spot.getSymbolicChunk().setSlotValue("top-bearing", 
	  	  new java.lang.Double(hspotbearing));
		hiding_spot.getSymbolicChunk().setSlotValue("bottom-bearing", 
	  	  new java.lang.Double(hspotbearing));
	  	hiding_spot.getSymbolicChunk().setSlotValue("top-pitch", 
	  	  new java.lang.Double(0));
		hiding_spot.getSymbolicChunk().setSlotValue("bottom-pitch", 
	  	  new java.lang.Double(0));
	  	hiding_spot.getSymbolicChunk().setSlotValue("top-range", hspotrange);
		hiding_spot.getSymbolicChunk().setSlotValue("bottom-range", hspotrange);	  	  
	  	  
                return 0.0;
              }
              ]]>
            </scriptable-action>
            <add buffer="configural" chunk="=hiding-spot"/>
            <add buffer="goal" type="take-perspective">
              <slot name="status" equals="do"/>
              <slot name="bearing" equals="=bearing"/>
              <slot name="range" equals="=range"/>
              <slot name="orientation" equals="=orientation"/>
              <slot name="return-status" equals="took-perspective"/>
              <slot name="return-goal" equals="=goal"/>
            </add>
	    <output>
              "obsX =obsX obsY =obsY oppX =oppX oppY =oppY hspotX =hspotX hspotY =hspotY"
	    </output>
          </action>
        </production>
 
        <production name="FindHidingPlace-HarvestHidingPlace">
          <condition>
            <match buffer="goal" type="find-hiding-place">
              <slot name="status" equals="took-perspective"/>
            </match>
            <!-- Verify distance, too? -->
            <match buffer="configural" type="configural-rep">
              <slot name="left-bearing" equals="=lbearing"/>
              <slot name="id" equals="id-fake-config"/>
              <slot name="right-bearing" equals="=rbearing"/>
              <slot name="top-bearing" equals="=tbearing"/>
              <slot name="bottom-bearing" equals="=bbearing"/>
            </match>
            <match buffer="retrieval-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition>
	  <action>
            <add buffer="retrieval" chunk="=configural"/>
            <modify buffer="goal">
              <slot name="status" equals="do-comparison"/>
            </modify>
          </action>
        </production>

        <production name="FindHidingPlace-DoTheComparison">
          <condition>
            <match buffer="goal" type="find-hiding-place">
              <slot name="status" equals="do-comparison"/>
              <slot name="return-result" equals="=obstacle-id"/>
            </match>
             <match buffer="retrieval-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
            <match buffer="retrieval" type="configural-rep">
              <slot name="left-bearing" equals="=lbearing"/>
              <slot name="right-bearing" equals="=rbearing"/>
              <slot name="top-bearing" equals="=tbearing"/>
              <slot name="bottom-bearing" equals="=bbearing"/>
            </match>
            <match buffer="configural" type="configural-rep">
              <slot name="id" equals="=obstacle-id"/>
            </match>
          </condition>
          <action>
            <scriptable-action>
              <![CDATA[
              function fire(model, production, bindings)
              {
	        var obstacle = bindings.get("=configural");
	        var obsrbearing = jactr.getSlotValue(obstacle, "right-bearing");
	        bindings.put("=obsrbearing", obsrbearing);
	        var obslbearing = jactr.getSlotValue(obstacle, "left-bearing");
	        bindings.put("=obslbearing", obslbearing);
	        var obstbearing = jactr.getSlotValue(obstacle, "top-bearing");
	        bindings.put("=obstbearing", obstbearing);
	        var obsbbearing = jactr.getSlotValue(obstacle, "bottom-bearing");
	        bindings.put("=obsbbearing", obsbbearing);
	        
	        var spot = new java.lang.String("good-spot");
	        if(obsrbearing < bindings.get("=rbearing")
	           || obslbearing > bindings.get("=lbearing")) 
	           spot = new java.lang.String("bad-spot");
	           
	        var goal = bindings.get("=goal");   
	        jactr.setSlotValue(goal, "return-result", spot);

                return 0.0;
              }
              ]]>
            </scriptable-action>
            <modify buffer="goal">
              <slot name="status" equals="done-evaluating"/>
            </modify>
            <output>
             "obsrbearing =obsrbearing , obslbearing =obslbearing , obstbearing =obstbearing , obsbbearing =obsbbearing , 
	     merbearing =rbearing , melbearing =lbearing , metbearing =tbearing , mebbearing =bbearing"
           </output>
          </action>
        </production>
                    
        <production name="FindHidingPlace-ReturnToSelf">
          <condition>
            <match buffer="goal" type="find-hiding-place">
              <slot name="status" equals="done-evaluating"/>
              <slot name="return-result" equals="=obs"/>
              <slot name="imagined-perspective" equals="=perspective"/>
            </match>
	  </condition>
	  <action>
	    <add buffer="goal" chunk="=perspective">
	      <slot name="status" equals="undo"/>
	      <slot name="return-status" equals="=obs"/>
	    </add>
	  </action>
	</production>

        <production name="FindHidingPlace-HidingPlaceFound">
          <condition>
            <match buffer="goal" type="find-hiding-place">
              <slot name="status" equals="good-spot"/>
              <slot name="return-goal" equals="=return-goal"/>
            </match>
            <match buffer="configural" type="configural-rep">
 	      <slot name="id" equals="id-fake-config"/>
            </match>
          </condition>
          <action>
            <add buffer="goal" chunk="=return-goal">
              <slot name="status" equals="hiding-place-found"/>
              <slot name="return-result" equals="=configural"/>
            </add>
          </action>
        </production>
        
        <production name="FindHidingPlace-NoHidingPlaceFound">
          <condition>
            <match buffer="goal" type="find-hiding-place">
              <slot name="status" equals="bad-spot"/>
            </match>
          </condition>
          <action>
            <modify buffer="goal">
              <slot name="status" equals="ready"/>
            </modify>
            <output>
              "Trying again!"
            </output>
          </action>
        </production>  
          
        
        
        
        
        
        
        
        
        
        <production name="TakePerspective-Undo">
          <condition>
            <match buffer="goal" type="take-perspective"> 
              <slot name="status" equals="undo"/>
              <slot name="bearing" equals="=bearing"/>
              <slot name="range" equals="=range"/>
              <slot name="orientation" equals="=orientation"/>
            </match>
          </condition>
          <action>
	    <scriptable-action>
              <![CDATA[
              function fire(model, production, bindings)
              {
		var range = new java.lang.Double(bindings.get("=range"));
		var bearing = new java.lang.Double(bindings.get("=bearing"));
		var orient = new java.lang.Double(bindings.get("=orientation"));
	  	var goal = bindings.get("=goal");

		var new_bearing = new java.lang.Double(-1 * orient);
		var new_range = new java.lang.Double(-1 * range);
		var new_orientation = new java.lang.Double(-1 * bearing);
		

		jactr.setSlotValue(goal, "bearing", new_bearing);
		jactr.setSlotValue(goal, "range", new_range);
		jactr.setSlotValue(goal, "orientation", new_orientation);

                return 0.0;
              }
              ]]>
	   </scriptable-action>
	   <modify buffer="goal">
	     <slot name="status" equals="do"/>
	   </modify>
	 </action>
	</production>
          
        <production name="TakePerspective-FaceDestination">
	  <condition>
	    <match buffer="goal" type="take-perspective">
	      <slot name="status" equals="do"/>
	      <slot name="bearing" equals="=bearing"/>
	      <slot name="range" equals="=range"/>
	      <slot name="orientation" equals="=orientation"/>
	    </match>
	    <match buffer="configural-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition>
	  <action>
	    <scriptable-action>
              <![CDATA[
              function fire(model, production, bindings)
              {
		var range = new java.lang.Double(bindings.get("=range"));
		var bearing = new java.lang.Double(bindings.get("=bearing"));
		var orient = new java.lang.Double(bindings.get("=orientation"));
	  	var goal = bindings.get("=goal");

		//if(range.doubleValue() < 0) {
		  //jactr.setSlotValue(goal, "range", new java.lang.Double(-1 * range.doubleValue()));
		  //bearing = new java.lang.Double(180 + bearing.doubleValue());
		//}

		jactr.setSlotValue(goal, "bearing", bearing);
		bindings.put("=bearing", bearing);

                return 0.0;
              }
              ]]>
	   </scriptable-action>
	    <add buffer="configural" type="configural-transform">
	      <slot name="delta-heading" equals="=bearing"/>
	    </add>
	    <modify buffer="goal">
	      <slot name="status" equals="walk"/>
	    </modify>
	    <output>
	      "Fake turned =bearing"
	    </output>
	  </action>
	</production>

	<production name="TakePerspective-WalkToDestination">
	  <condition>
	    <match buffer="goal" type="take-perspective">
	      <slot name="status" equals="walk"/>
	      <slot name="range" equals="=range"/>
	    </match>
	    <match buffer="configural-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition>
	  <action>
	    <modify buffer="goal">
	      <slot name="status" equals="orient"/>
	    </modify>
	    <add buffer="configural" type="configural-transform">
	      <slot name="translation" equals="=range"/>
	    </add>
	    <output>
	      "Fake walked =range"
	    </output>
	  </action>
	</production>

	<production name="TakePerspective-TakeOrient">
	  <condition>
	    <match buffer="goal" type="take-perspective">
	      <slot name="status" equals="orient"/>
	      <slot name="orientation" equals="=orient"/>
	    </match>
	    <match buffer="configural-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition>
	  <action>
	    <add buffer="configural" type="configural-transform">
	      <slot name="delta-heading" equals="=orient"/>
	    </add>
	    <modify buffer="goal">
	      <slot name="status" equals="done"/>
	    </modify>
	    <output>
	      "Fake turned =orient"
	    </output>	    
	  </action>
	</production>
	
	<production name="TakePerspective-Done">
	  <condition>
	    <match buffer="goal" type="take-perspective">
	      <slot name="status" equals="done"/>
	      <slot name="return-goal" equals="=retgoal"/>
	      <slot name="return-status" equals="=retstatus"/>
	    </match>
	    <match buffer="configural-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition>
          <action>
	    <add buffer="goal" chunk="=retgoal">
	      <slot name="status" equals="=retstatus"/>
	      <slot name="imagined-perspective" equals="=goal"/>
	    </add>
	  </action>
	</production>

                

                
                
                
                <production name="SearchForVisualLocation-Start">
                 <condition>
                    <match buffer="goal" type="search-for-visual-location">
                     <slot name="status" equals="ready"/>
                     <slot name="kind" equals="=kind"/>
                     <slot name="nearest" equals="=nearest"/>
                    </match>
                    <match buffer="visual-state" type="module-state">
                     <slot name="modality" equals="free"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="try-visual-scan"/>
                    </modify>
                    <add buffer="visual-location" type="visual-location">
                     <slot name="kind" equals="=kind"/>
                     <slot name="attended" equals="nil"/>
                     <slot name="nearest" equals="=nearest"/>
                     <!--slot name="color" equals="red"/-->
                    </add>
                    <output>
                     "scanning the visual field for a =kind"
                    </output>
                 </action>
                </production>

                <production name="SearchForVisualLocation-Harvest">
                 <condition>
                    <match buffer="goal" type="search-for-visual-location">
                     <slot name="status" equals="try-visual-scan"/>
                     <slot name="kind" equals="=kind"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                    </match>
                    <match buffer="visual-location" type="visual-location">
                     <slot name="kind" equals="=kind"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="completed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="return-result" equals="=visual-location"/>
                     <slot name="status" equals="location-found"/>
                    </add>
                    <output>
                     "found =kind at =visual-location"
                    </output>
                 </action>
                 <!--comment>
                    Harvest the results

                 </comment-->
                </production>

                <production name="SearchForVisualLocation-Mismatch">
                 <condition>
                    <match buffer="goal" type="search-for-visual-location">
                     <slot name="status" equals="try-visual-scan"/>
                     <slot name="kind" equals="=kind"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                    </match>
                    <match buffer="visual-location" type="visual-location">
                     <slot name="kind" not="=kind"/>
                     <slot name="kind" equals="=realKind"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="return-result" equals="=visual-location"/>
                     <slot name="status" equals="no-location-found"/>
                    </add>
                    <output>
                     "I found a =realKind but not =kind failing."
                    </output>
                 </action>
                </production>

                <production name="SearchForVisualLocation-Failed">
                 <condition>
                    <match buffer="goal" type="search-for-visual-location">
                     <slot name="status" equals="try-visual-scan"/>
                     <slot name="kind" equals="=kind"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                    </match>
                    <match buffer="visual-location" type="error"/>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="return-result" equals="nil"/>
                     <slot name="status" equals="no-location-found"/>
                    </add>
                    <output>
                     "nothing found"
                    </output>
                 </action>
                </production>






                
                
                <production name="SearchForConfigural-Start">
                 <condition>
                    <match buffer="goal" type="search-for-configural">
                     <slot name="status" equals="ready"/>
                     <slot name="visual-location" equals="=visLoc"/>
                    </match>
                    <match buffer="visual-state" type="module-state">
                     <slot name="modality" equals="free"/>
                    </match>
                    <match buffer="configural-state" type="module-state">
                     <slot name="modality" equals="free"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="try-encode"/>
                    </modify>
                    <add buffer="configural" type="configural-rep">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </add>
                    <output>
                     "shifting attention to =visLoc"
                    </output>
                 </action>
                </production>

                <production name="SearchForConfigural-Harvest">
                 <condition>
                    <match buffer="goal" type="search-for-configural">
                     <slot name="status" equals="try-encode"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="visual-location" equals="=visLoc"/>
                    </match>
                    <match buffer="configural" type="configural-rep">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="completed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="return-result" equals="=configural"/>
                     <slot name="status" equals="configural-found"/>
                    </add>
                    <output>
                     "encoded =configural"
                    </output>
                 </action>
                </production>

                <production name="SearchForConfigural-Failed">
                 <condition>
                    <match buffer="goal" type="search-for-configural">
                     <slot name="status" equals="try-encode"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="visual-location" equals="=visLoc"/>
                    </match>
                    <match buffer="configural" type="error">
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="return-result" equals="=configural"/>
                     <slot name="status" equals="no-configural-found"/>
                    </add>
                    <output>
                     "found nothing"
                    </output>
                 </action>
                </production>

                
           
                
               <production name="Identify-Start">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="ready"/>
                     <slot name="configural" equals="=conf"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                    <match buffer="visual-state" type="module-state">
                     <slot name="modality" equals="free"/>
                    </match>
                 </condition>
                 <action>
                    <add buffer="visual" type="actrs-visual">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </add>
                    <modify buffer="goal">
                     <slot name="status" equals="try-retrieval"/>
                    </modify>
                    <output>
                     "lets see what =conf is.."
                    </output>
                 </action>
                </production>

                <production name="Identify-HarvestOpponent">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="name" equals="field"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                    <match buffer="visual" type="actrs-visual">
                     <slot name="type" equals="opponent"/>
                     <slot name="token" equals="=token"/>
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="completed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                      <slot name="status" equals="identified-opponent"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "Found type is opponent and token is =token"
                    </output>
                 </action>
                </production>
                
                <production name="Identify-HarvestFlag">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="name" equals="field"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                    <match buffer="visual" type="actrs-visual">
                     <slot name="type" equals="flag"/>
                     <slot name="token" equals="=token"/>
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="completed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                      <slot name="status" equals="identified-flag"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "Found type is flag and token is =token"
                    </output>
                 </action>
                </production>
                
                
                
                <production name="Identify-Harvest">
                  <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="name" not="field"/>
                     <slot name="name" equals="=name"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                    <match buffer="visual" type="actrs-visual">
                     <slot name="type" equals="=name"/>
                     <slot name="token" equals="=token"/>
                     <slot name="screen-pos" equals="=visLoc"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="completed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                      <slot name="status" equals="identify-suceeded"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "Found what we want, type is =name and token is =token"
                    </output>
                 </action>
                </production>

                <production name="Identify-Failed">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="name" equals="=name"/>
                     <slot name="name" not="field"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="id" equals="=id"/>
                    </match>
                    <match buffer="visual" type="actrs-visual">
                      <slot name="type" not="=name"/>
                      <slot name="type" equals="=type"/>
                      <slot name="token" equals="=token"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="status" equals="identify-failed"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "Not what I want, this is =type"
                    </output>
                 </action>
                </production>
                
                <production name="Identify-FailedFieldScan">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                     <slot name="name" equals="field"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="id" equals="=id"/>
                    </match>
                    <match buffer="visual" type="actrs-visual">
                      <slot name="type" not="opponent"/>
                      <slot name="type" not="flag"/>
                      <slot name="type" equals="=type"/>
                      <slot name="token" equals="=token"/>
                    </match>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="status" equals="identify-failed"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "Not what I want, this is =type"
                    </output>
                 </action>
                </production>

                <production name="Identify-Failed2">
                 <condition>
                    <match buffer="goal" type="identify">
                     <slot name="status" equals="try-retrieval"/>
                     <slot name="configural" equals="=conf"/>
                     <slot name="return-goal" equals="=returnGoal"/>
                    </match>
                    <match buffer="configural" chunk="=conf">
                     <slot name="id" equals="=id"/>
                    </match>
                    <match buffer="visual" type="error"/>
                 </condition>
                 <action>
                    <modify buffer="goal">
                     <slot name="status" equals="failed"/>
                    </modify>
                    <add buffer="goal" chunk="=returnGoal">
                     <slot name="status" equals="identify-failed"/>
                    </add>
                    <remove buffer="visual"/>
                    <output>
                     "I have no idea what this is"
                    </output>
                 </action>
                </production>







	<production name="MoveToObject-FaceDirection">
	  <condition>
            <match buffer="goal" type="move-to-object">
 	      <slot name="status" equals="ready"/>
	      <slot name="bearing" equals="=bearing"/>
            </match>
            <match buffer="manual-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition> 
          <action>
            <modify buffer="goal">
              <slot name="status" equals="move"/>
            </modify>
            <add buffer="manual" type="turn">
              <slot name="delta-heading" equals="=bearing"/>
            </add>
          </action>
        </production>

	<production name="MoveToObject-MoveToObject">
	  <condition>
            <match buffer="goal" type="move-to-object">
 	      <slot name="status" equals="move"/>
	      <slot name="range" equals="=range"/>
            </match>
            <match buffer="manual-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition> 
          <action>
            <modify buffer="goal">
              <slot name="status" equals="take-orientation"/>
            </modify>
            <add buffer="manual" type="move-to">
              <slot name="range" equals="=range"/>
            </add>
          </action>
        </production>

	<production name="MoveToObject-TakeOrientation">
	  <condition>
            <match buffer="goal" type="move-to-object">
 	      <slot name="status" equals="take-orientation"/>
	      <slot name="orientation" equals="orientation"/>
            </match>
            <match buffer="manual-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition> 
          <action>
            <modify buffer="goal">
              <slot name="status" equals="done"/>
            </modify>
            <add buffer="manual" type="turn">
              <slot name="delta-heading" equals="=orientation"/>
            </add>
          </action>
        </production>

	<production name="MoveToObject-Done">
	  <condition>
            <match buffer="goal" type="move-to-object">
 	      <slot name="status" equals="done"/>
	      <slot name="return-goal" equals="=return-goal"/>
            </match>
            <match buffer="manual-state" type="module-state">
              <slot name="modality" equals="free"/>
            </match>
          </condition> 
          <action>
            <add buffer="goal" chunk="=return-goal"/>
          </action>
        </production>



                
     </procedural-memory>
     
     
     
     
     
     <!-- Parameters -->

                <parameters>
                        <parameter name="Time" value="0.0"/>
                        <parameter name="W" value="0.0"/>
                        <parameter name="G" value="20.0"/>
                        <parameter name="UtilityThreshold" value="0.0"/>
                        <parameter name="SubsymbolicComputation" value="true"/>
                        <parameter name="BaseLevelLearning" value="0.5"/>
                        <parameter name="ParameterLearning" value="-Infinity"/>
                        <parameter name="AssociativeLearning" value="1"/>
                        <parameter name="OptimizedLearning" value="false"/>
                        <parameter name="RetrievalThreshold" value="-Infinity"/>
                        <parameter name="LatencyFactor" value="1.0"/>
                        <parameter name="BaseLevelConstant" value="0.0"/>
                        <parameter name="DefaultActionTime" value="0.05"/>
                        <parameter name="Randomness" value="true"/>
                        <parameter name="ActivationNoise" value="0.1"/>
                        <parameter name="PermanentNoise" value="0.0"/>
                        <parameter name="ExpectedGainNoise" value="0.0"/>
                        <parameter name="PartialMatching" value="false"/>
                        <parameter name="MismatchPenalty" value="1.0"/>
                        <parameter name="MaximumDifference" value="-10.0"/>
                        <parameter name="MaximumSimilarity" value="1.0"/>
                        <parameter name="CostPenalty" value="1.0"/>
                        <parameter name="IntialExperience" value="10.0"/>
                        <parameter name="ThresholdTime" value="2.0"/>
                        <parameter name="CycleSkipping" value="false"/>
                        <parameter name="RealTime" value="false"/>
                        <parameter name="RealTimeScalor" value="1.0"/>
                </parameters>

<!-- State buffers -->
    <buffer name="manual-state" chunk="manual-state"/>
    <buffer name="visual-state" chunk="visual-state"/>
    <buffer name="retrieval-state" chunk="retrieval-state"/>
    <buffer name="configural-state" chunk="configural-state"/>
    <buffer name="goal" chunk="play"/>
     
   </model>
   
   
 
   
 </actr>
           

